{
  "definitions": {
    "Author": {
      "properties": {
        "name": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "id": {
          "redOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "surname"
      ],
      "type": "object"
    },
    "Book": {
      "properties": {
        "name": {
          "type": "string"
        },
        "count": {
          "type": "integer"
        },
        "release_date": {
          "type": "string"
        },
        "id": {
          "redOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "release_date"
      ]
    },
    "Student": {
      "properties": {
        "name": {
          "type": "string"
        },
        "surname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "scholarship": {
          "type": "boolean"
        },
        "average_score": {
          "type": "float"
        },
        "id": {
          "redOnly": true,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "surname",
        "email",
        "phone",
        "scholarship",
        "average_score"
      ]
    }
  },
  "info": {
    "title": "School library",
    "version": "6.8.1"
  },
  "paths": {
    "/students": {
      "get": {
        "responses": {
          "200": {
            "description": "Students data",
            "schema": {
              "items": {
                "$ref": "#definitions/Student"
              },
              "type": "array"
            }
          }
        },
        "summary": "This is an endpoint for obtaining the students.",
        "tags": [
          "Student"
        ]
      }
    },
    "/student/{id}": {
      "get": {
        "parameters": [
          {
            "description": "display student by id",
            "in": "path",
            "name": "id",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Student by id",
            "schema": {
              "items": {
                "$ref": "#definitions/Student"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Error"
          }
        },
        "summary": "This is an endpoint for obtaining the students.",
        "tags": [
          "Student"
        ]
      },
      "delete": {
        "parameters": [
          {
            "description": "ID to delete student",
            "in": "path",
            "name": "id",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The student has been deleted"
          },
          "400": {
            "description": "There is no such student"
          },
          "500": {
            "description": "Error, the student took the book "
          }
        },
        "summary": "This is an endpoint for delete the student by id",
        "tags": [
          "Student"
        ]
      }
    },
    "/student/name/{name}": {
      "get": {
        "parameters": [
          {
            "description": "display student by name",
            "in": "path",
            "name": "name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Student by name",
            "schema": {
              "items": {
                "$ref": "#definitions/Student"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Error"
          }
        },
        "summary": "This endpoint retrieves students by their name",
        "tags": [
          "Student"
        ]
      }
    },
    "/books": {
      "get": {
        "responses": {
          "200": {
            "description": "Books data",
            "schema": {
              "items": {
                "$ref": "#definitions/Book"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Error"
          }
        },
        "summary": "This is an endpoint for obtaining the books.",
        "tags": [
          "Book"
        ]
      }
    },
    "/book/{id}": {
      "get": {
        "parameters": [
          {
            "description": "display book by id",
            "in": "path",
            "name": "id",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Book data by id",
            "schema": {
              "items": {
                "$ref": "#definitions/Book"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Error"
          }
        },
        "summary": "This is an endpoint for obtaining the book by id.",
        "tags": [
          "Book"
        ]
      },
      "delete": {
        "parameters": [
          {
            "description": "ID to delete book",
            "in": "path",
            "name": "id",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "The book has been deleted"
          },
          "500": {
            "description": "Error, we took the book to read"
          }
        },
        "summary": "This is an endpoint for delete the book by id",
        "tags": [
          "Book"
        ]
      },
      "patch": {
        "parameters": [
          {
            "description": "ID to patch book",
            "in": "path",
            "name": "id",
            "type": "integer"
          },
          {
            "description": "Data that needs to be update",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name book"
                },
                "count": {
                  "type": "integer",
                  "description": "Count book"
                },
                "release_date": {
                  "type": "date",
                  "description": "Book release date in YYYY-MM-DD format"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The update was successful"
          },
          "404": {
            "description": "Error methods"
          },
          "500": {
            "description": "Error"
          }
        },
        "summary": "Update book data",
        "tags": [
          "Book"
        ]
      }
    },
    "/book": {
      "post": {
        "parameters": [
          {
            "description": "Adding a new book",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name book"
                },
                "count": {
                  "type": "integer",
                  "description": "Count book"
                },
                "release_date": {
                  "type": "date",
                  "description": "Book release date in YYYY-MM-DD format"
                },
                "author": {
                  "type": "string",
                  "description": "The author's first and last name separated by a space"
                }
              },
              "additionalProperties": false
            }
          }
        ],
        "responses": {
          "201": {
            "description": "book added successfully"
          },
          "405": {
            "description": "Error methods"
          },
          "500": {
            "description": "Error"
          }
        },
        "summary": "Adding a book",
        "tags": [
          "Book"
        ]
      }
    },
    "/book/name/{name}": {
      "get": {
        "parameters": [
        {
          "description": "Search book by title",
          "in": "path",
          "name": "name",
          "type": "string"
        }
      ],
        "responses": {
          "200": {
            "description": "Book by name",
            "schema": {
              "items": {
                "$ref": "#definitions/Book"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Error"
          }
        },
        "summary": "Book by title",
        "tags": [
          "Book"
        ]
      }
    },
    "/authors": {
      "get": {
        "responses": {
          "200": {
            "description": "Display authors",
            "schema": {
              "items": {
                "$ref": "#definitions/Author"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Error"
          }
        },
        "summary": "Show all authors",
        "tags": [
          "Author"
        ]
      }
    },
    "/author/{id}": {
      "get": {
        "parameters": [
          {
            "description": "Author by id",
            "in": "path",
            "name": "id",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Authors data by id",
            "schema": {
              "items": {
                "$ref": "#definitions/Author"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Error"
          }
        },
        "summary": "Find author by id",
        "tags": [
          "Author"
        ]
      },
      "delete": {
        "parameters": [
          {
            "description": "Delete author by id",
            "in": "path",
            "name": "id",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Author removed successfully"
          },
          "404": {
            "description": "Author not found"
          },
          "500": {
            "description": "Error, the author's book was taken to read"
          }
        },
        "summary": "Remove author",
        "tags": [
          "Author"
        ]
      }
    },
    "/author/name/{name}": {
      "get": {
        "parameters": [
          {
            "description": "Display author by name",
            "in": "path",
            "name": "name",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Author data by name",
            "schema": {
              "items": {
                "$ref": "#definitions/Author"
              },
              "type": "array"
            }
          },
          "500": {
            "description": "Error"
          }
        },
        "summary": "Author by name",
        "tags": [
          "Author"
        ]
      }
    }
  },
  "swagger": "2.0"
}